version: '3.8'

services:
  # ML service
  ml-service:
    build:
      context: ../ml_service
      dockerfile: ../docker/ml_service/Dockerfile
    volumes:
      - ../ml_service/app:/app/ml_service/app
      - ../ml_service/models:/app/ml_service/models
      - ../ml_service/data:/app/ml_service/data
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - MODEL_DIR=/app/ml_service/models
      - DATA_DIR=/app/ml_service/data
    restart: always

  # Backend service
  backend:
    build:
      context: ../backend
      dockerfile: ../docker/backend/Dockerfile
    volumes:
      - ../backend:/app
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/ml_service
      - REDIS_URL=redis://redis:6379/0
      - ML_SERVICE_URL=http://ml-service:8000  
    command: bash -c "python -m app.models.update_models && uvicorn app.main:app --host 0.0.0.0 --port 8001"
    depends_on:
      - redis
      - db
      - ml-service
    restart: always
  
  # Frontend service
  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/frontend/Dockerfile
    volumes:
      - ../frontend:/app
    ports:
      - "8501:8501"
    environment:
      - BACKEND_URL=http://backend:8001
      - LANG=ru_RU.UTF-8
      - LC_ALL=ru_RU.UTF-8
    depends_on:
      - backend
    restart: always

  # Redis worker for processing prediction queue
  worker:
    build:
      context: ../backend
      dockerfile: ../docker/backend/Dockerfile
    volumes:
      - ../backend:/app
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/ml_service
      - REDIS_URL=redis://redis:6379/0
      - ML_SERVICE_URL=http://ml-service:8000  # u041eu0431u043du043eu0432u043bu0435u043du043e u0434u043bu044f u043fu043eu0434u043au043bu044eu0447u0435u043du0438u044f u043a ML-u0441u0435u0440u0432u0438u0441u0443 u0432 Docker
    command: python -m app.queue.worker
    depends_on:
      - redis
      - db
      - backend
      - ml-service
    restart: always

  # Redis service
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always

  # Database for backend
  db:
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ml_service
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../backend/app/models/insert_models.sql:/docker-entrypoint-initdb.d/insert_models.sql
    ports:
      - "5433:5432"
    restart: always

volumes:
  postgres_data:
  redis_data:
