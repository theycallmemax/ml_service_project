import streamlit as st
import pandas as pd
import numpy as np
import json
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from utils import check_authentication, get_models, create_prediction, get_predictions_history, get_prediction, get_current_price
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è",
    page_icon="üìà",
    layout="wide",  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ —à–∏—Ä–æ–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.title("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
current_user = check_authentication()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
def display_current_price(crypto):
    st.subheader("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞")
    
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã..."):
        price_data = get_current_price(crypto.lower())
    
    if "error" in price_data:
        st.error(price_data["error"])
    else:
        price = price_data.get("price", "N/A")
        timestamp = price_data.get("timestamp", "N/A")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        col1, col2 = st.columns(2)
        with col1:
            st.metric(
                label=f"{crypto.upper()}/USDT",
                value=f"${price:,.2f}" if isinstance(price, (int, float)) else price
            )
        with col2:
            st.caption(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}")
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"):
                st.rerun()


# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
if 'selected_prediction_id' not in st.session_state:
    st.session_state.selected_prediction_id = None

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
response = get_models(st.session_state.token)

if response.status_code == 200:
    models = response.json()
    
    if models and len(models) > 0:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
        model_options = {f"{model['name']} ({model['description']}) - {model['price']} –∫—Ä–µ–¥–∏—Ç–æ–≤": model["id"] for model in models}
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
        left_col, right_col = st.columns([1, 1])
        
        # –õ–ï–í–ê–Ø –ö–û–õ–û–ù–ö–ê - –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        with left_col:
            st.header("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            with st.form("prediction_form"):
                # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
                selected_model_name = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
                    options=list(model_options.keys())
                )
                selected_model_id = model_options[selected_model_name]
                
                # –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                coin = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:",
                    options=["BTC", "ETH", "LTC", "XRP", "DOGE"]
                )
                
                period = st.slider(
                    "–ü–µ—Ä–∏–æ–¥ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–¥–Ω–∏):",
                    min_value=1, max_value=30, value=7
                )
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ API
                input_data = {
                    "coin": coin,
                    "period": period,
                    "options": {
                        "include_technical": "",
                        "include_sentiment": ""
                    }
                }
                
                submit_button = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
                
                if submit_button:
                    response = create_prediction(st.session_state.token, selected_model_id, input_data)
                    if response.status_code == 201:
                        prediction_data = response.json()
                        st.success(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ! ID: {prediction_data.get('id')}")
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        st.session_state.selected_prediction_id = prediction_data.get('id')
                        st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    else:
                        try:
                            error_msg = response.json().get("detail", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
                        except:
                            error_msg = "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"
                        st.error(f"–û—à–∏–±–∫–∞: {error_msg}")
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            st.subheader("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏")
            models_data = []
            for model in models:
                models_data.append({
                    "–ù–∞–∑–≤–∞–Ω–∏–µ": model.get("name"),
                    "–¶–µ–Ω–∞": f"{model.get('price')} –∫—Ä–µ–¥–∏—Ç–æ–≤"
                })
            df_models = pd.DataFrame(models_data)
            st.dataframe(df_models, use_container_width=True, height=200)
        
        # –ü–†–ê–í–ê–Ø –ö–û–õ–û–ù–ö–ê - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        with right_col:
            st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
            
            # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
            prediction_id = st.session_state.selected_prediction_id
            
            if prediction_id:
                prediction_response = get_prediction(st.session_state.token, prediction_id)
                
                if prediction_response.status_code == 200:
                    prediction_details = prediction_response.json()
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏
                    status_map = {
                        "queued": "–í –æ—á–µ—Ä–µ–¥–∏",
                        "processing": "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è",
                        "done": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
                        "completed": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
                        "failed": "–û—à–∏–±–∫–∞"
                    }
                    status = status_map.get(prediction_details.get("status"), prediction_details.get("status"))
                    
                    st.info(f"ID –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {prediction_id} | –°—Ç–∞—Ç—É—Å: {status} | –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: {prediction_details.get('input_data', {}).get('coin', 'N/A')}")
                    display_current_price(coin)

                    
                    # –ï—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
                    if prediction_details.get("status") in ["done", "completed"] and prediction_details.get("result"):
                        result = prediction_details.get("result", {})
                        
                        # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—ã –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                        start_date = datetime.now()
                        period = prediction_details.get('input_data', {}).get('period', 7)
                        dates = [(start_date + timedelta(days=i)).strftime('%Y-%m-%d') for i in range(period)]
                        
                        # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                        forecast_data = []
                        price_values = []
                        
                        try:
                            # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                            crypto = prediction_details.get('input_data', {}).get('coin', 'BTC')
                            
                            current_price_data = get_current_price(crypto.lower())
                            if not "error" in current_price_data:
                                current_price = current_price_data.get("price")
                                
                                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π
                                first_prediction = None
                                if isinstance(result, dict) and "forecasts" in result and result["forecasts"]:
                                    if isinstance(result["forecasts"][0], dict) and "price" in result["forecasts"][0]:
                                        first_prediction = result["forecasts"][0]["price"]
                                    elif isinstance(result["forecasts"][0], (int, float)):
                                        first_prediction = result["forecasts"][0]
                                elif isinstance(result, dict) and "forecast" in result and result["forecast"]:
                                    first_prediction = result["forecast"][0] if result["forecast"] else None
                                elif isinstance(result, list) and result:
                                    first_prediction = result[0]
                                    
                                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é LONG/SHORT —Å —ç–º–æ–¥–∑–∏
                                if first_prediction and isinstance(first_prediction, (int, float)):
                                    if first_prediction > current_price:
                                        # –ó–µ–ª–µ–Ω–∞—è —Ç–∞–±–ª–∏—á–∫–∞ –¥–ª—è LONG
                                        st.success(f"LONG üìà")
                                    else:
                                        # –ö—Ä–∞—Å–Ω–∞—è —Ç–∞–±–ª–∏—á–∫–∞ –¥–ª—è SHORT
                                        st.error(f"SHORT üìâ")
                        except Exception as e:
                            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É: {e}")


                                           
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –∫–ª—é—á–æ–º 'forecasts'
                        if isinstance(result, dict) and "forecasts" in result:
                            forecasts = result["forecasts"]
                            for i, forecast in enumerate(forecasts):
                                if isinstance(forecast, dict) and "price" in forecast and "date" in forecast:
                                    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –æ–±—ä–µ–∫—Ç–∞–º–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ price –∏ date
                                    price = forecast["price"]
                                    date = forecast["date"]
                                    price_values.append(price)
                                    forecast_data.append({
                                        "–î–∞—Ç–∞": date,
                                        "–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã": f"${price:.2f}",
                                        "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ": forecast.get("change_from_current", "N/A")
                                    })
                                else:
                                    # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É
                                    if i < len(dates):
                                        date = dates[i]
                                    else:
                                        date = (start_date + timedelta(days=i)).strftime('%Y-%m-%d')
                                    
                                    # –ï—Å–ª–∏ forecast –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
                                    if isinstance(forecast, (int, float)):
                                        price = float(forecast)
                                    else:
                                        # –ï—Å–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
                                        base_price = 30000 if not price_values else price_values[-1]
                                        price = base_price * (1 + np.random.uniform(-0.05, 0.08))
                                    
                                    price_values.append(price)
                                    forecast_data.append({
                                        "–î–∞—Ç–∞": date,
                                        "–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã": f"${price:.2f}"
                                    })
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å –∫–ª—é—á–æ–º 'forecast'
                        elif isinstance(result, dict) and "forecast" in result:
                            forecasts = result["forecast"]
                            for i, date in enumerate(dates):
                                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                                if i < len(forecasts):
                                    price = forecasts[i]
                                else:
                                    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å, –¥–µ–ª–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ
                                    price = forecasts[-1] * (1 + np.random.uniform(-0.02, 0.02))
                                
                                price_values.append(price)
                                forecast_data.append({
                                    "–î–∞—Ç–∞": date,
                                    "–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã": f"${price:.2f}"
                                })
                        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π
                        elif isinstance(result, list):
                            forecasts = result
                            for i, date in enumerate(dates):
                                if i < len(forecasts):
                                    price = forecasts[i]
                                else:
                                    price = forecasts[-1] * (1 + np.random.uniform(-0.02, 0.02))
                                
                                price_values.append(price)
                                forecast_data.append({
                                    "–î–∞—Ç–∞": date,
                                    "–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã": f"${price:.2f}"
                                })
                        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Å—Ç–æ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ
                        else:
                            base_price = 30000  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ BTC
                            if prediction_details.get('input_data', {}).get('coin') == "ETH":
                                base_price = 2000
                            elif prediction_details.get('input_data', {}).get('coin') == "LTC":
                                base_price = 80
                            
                            for i, date in enumerate(dates):
                                # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                                change = np.random.uniform(-0.05, 0.08)
                                price = base_price * (1 + change * (i + 1))
                                price_values.append(price)
                                forecast_data.append({
                                    "–î–∞—Ç–∞": date,
                                    "–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã": f"${price:.2f}"
                                })
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
                        st.subheader("–¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ –¥–Ω—è–º")
                        df_forecast = pd.DataFrame(forecast_data)
                        st.dataframe(df_forecast, use_container_width=True)
                        
                        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
                        st.subheader("–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ü–µ–Ω—ã")
                        fig, ax = plt.subplots(figsize=(10, 6))
                        ax.plot(df_forecast["–î–∞—Ç–∞"], price_values, marker='o', linestyle='-', color='blue')
                        ax.set_title(f"–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã {prediction_details.get('input_data', {}).get('coin', '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã')}")
                        ax.set_xlabel("–î–∞—Ç–∞")
                        ax.set_ylabel("–¶–µ–Ω–∞ (USD)")
                        ax.grid(True, linestyle='--', alpha=0.7)
                        plt.xticks(rotation=45)
                        plt.tight_layout()
                        st.pyplot(fig)
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                        if isinstance(result, dict) and "analytics" in result:
                            st.subheader("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
                            st.json(result["analytics"])
                    
                    elif prediction_details.get("status") == "failed":
                        st.error("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π")
                    elif prediction_details.get("status") in ["queued", "processing"]:
                        st.warning("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
                        # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                        st.empty()
                        st.rerun()
                else:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
            else:
                st.info("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∏–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        
        # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (–≤–Ω–∏–∑—É –ø–æ–¥ –∫–æ–ª–æ–Ω–∫–∞–º–∏)
        st.header("–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
        history_response = get_predictions_history(st.session_state.token)
        
        if history_response.status_code == 200:
            predictions = history_response.json()
            if predictions and len(predictions) > 0:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                predictions_data = []
                for pred in predictions:
                    status_map = {
                        "queued": "–í –æ—á–µ—Ä–µ–¥–∏",
                        "processing": "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è",
                        "done": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ", 
                        "completed": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
                        "failed": "–û—à–∏–±–∫–∞"
                    }
                    
                    status = status_map.get(pred.get("status"), pred.get("status"))
                    coin = pred.get("input_data", {}).get("coin", "N/A")
                    period = pred.get("input_data", {}).get("period", "N/A")
                    
                    predictions_data.append({
                        "ID": pred.get("id"),
                        "–î–∞—Ç–∞": pred.get("created_at"),
                        "–ú–æ–¥–µ–ª—å": pred.get("model_id"),
                        "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞": coin,
                        "–ü–µ—Ä–∏–æ–¥ (–¥–Ω–∏)": period,
                        "–°—Ç–∞—Ç—É—Å": status,
                    })
                
                # –°–æ–∑–¥–∞–µ–º DataFrame –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–≥–æ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏
                df_history = pd.DataFrame(predictions_data)
                st.dataframe(df_history, use_container_width=True, height=300)
                
                # –í—ã–±–æ—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                selected_id = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                    options=[pred["ID"] for pred in predictions_data],
                    format_func=lambda x: f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ #{x} - {next((p['–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞'] for p in predictions_data if p['ID'] == x), '')} –Ω–∞ {next((p['–ü–µ—Ä–∏–æ–¥ (–¥–Ω–∏)'] for p in predictions_data if p['ID'] == x), '')} –¥–Ω–µ–π"
                )
                
                if st.button("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"):
                    st.session_state.selected_prediction_id = selected_id
                    st.rerun()
            else:
                st.info("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    else:
        st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
else:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π")